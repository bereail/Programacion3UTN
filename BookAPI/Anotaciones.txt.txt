‚Ä¢ Repository
Prop√≥sito:
Se encarga de la interacci√≥n directa con la base de datos. Es el lugar donde se realizan las operaciones CRUD (crear, leer, actualizar, eliminar) sobre las entidades.


‚Ä¢ Service
Prop√≥sito:
Manejar la l√≥gica de negocio de la aplicaci√≥n. Coordina y orquesta las operaciones que pueden involucrar uno o m√°s repositorios, validaciones, reglas de negocio y transformaciones (como el mapeo de entidades a DTOs).



. IUserRepository en Domain.Interfaces
 - Define la abstracci√≥n de acceso a datos (Repository Pattern), es decir, c√≥mo interactuar con la base de datos 
o la fuente de datos sin depender de una implementaci√≥n concreta.
 - Se encarga de las operaciones CRUD espec√≠ficas de User (GetAllUsers, GetUserById, AddUser, UpdateUser, DeleteUser).
 - Depende solo del dominio (Domain.Entities.User) y no de ninguna tecnolog√≠a espec√≠fica como bases de datos, frameworks, etc.

. IUserService en Application.Data.Interfaces
  - Define la l√≥gica de negocio y las reglas espec√≠ficas para manejar usuarios dentro del sistema.
  - Usa IUserRepository internamente para interactuar con los datos.
  - Se enfoca en la coordinaci√≥n de operaciones, validaciones y reglas de negocio

üìå ¬øPor qu√© esta separaci√≥n?
Principio de responsabilidad √∫nica (SRP - SOLID)

IUserRepository maneja la persistencia de datos.
IUserService maneja la l√≥gica de negocio.

Desacoplamiento entre capas

IUserRepository solo sabe de los datos y no de la l√≥gica de la aplicaci√≥n.
IUserService usa IUserRepository y puede cambiar la l√≥gica sin afectar la capa de acceso a datos.

üìå Resumen
‚úÖ IUserRepository: Definido en Domain.Interfaces, se encarga de la persistencia de datos.
‚úÖ IUserService: Definido en Application.Data.Interfaces, maneja la l√≥gica de negocio y usa IUserRepository internamente.

üìå Ventajas:

UserController no tiene l√≥gica de negocio.
UserService maneja validaciones antes de eliminar.
UserRepository solo ejecuta la acci√≥n en la base de datos.